# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12reEf_zJOIM2bv6mKdetu_VFOw3-k9nZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.datasets import make_classification
from sklearn.linear_model import LogisticRegression, SGDClassifier
from mlxtend.plotting import plot_decision_regions
from sklearn.utils import shuffle
from sklearn.metrics import log_loss

!pip install --upgrade --no-cache-dir gdown
!gdown 1FS-JXMl-PFGzA2ogy1xdBKVI6VbVDQMF

df = pd.read_csv('/content/heart_disease_health_indicators.csv')
df

df = df.rename(columns={'Income': 'HeartDiseaseorAttack', 'HeartDiseaseorAttack': 'Income'})
df

df['Income'], df['HeartDiseaseorAttack'] = df['HeartDiseaseorAttack'].copy(), df['Income'].copy()
df

# جدا کردن ویژگی‌ها و خروجی
features = df.iloc[:, :-1]  # ستونهای ۲ تا آخر به عنوان ویژگی‌ها
output = df.iloc[:, -1]    # ستون اول به عنوان خروجی

# ایجاد دیتافریم جدید برای هر کلاس
class_0_samples = df[output == 0].head(100)
class_1_samples = df[output == 1].head(100)

# ادغام داده‌های دو کلاس در یک دیتافریم جدید
new_df = pd.concat([class_0_samples, class_1_samples], ignore_index=True)
new_df

shuffled_data = shuffle(new_df)
shuffled_data.to_csv('created_data.csv', index=False)
print(shuffled_data)

df1 = pd.read_csv('/content/created_data.csv')
df1

X = new_df.iloc[:, :-1]
y = new_df.iloc[:, -1].values.reshape(-1,1)
X.shape,y.shape

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=42)
model = SGDClassifier(loss='log_loss',max_iter=20000, random_state=27)
y_train = y_train.ravel()
y_test = y_test.ravel()
# آموزش مدل و دریافت مقدار تابع اتلاف در هر تکرار
loss_history = [];

for epoch in range(20000):
    # آموزش مدل
    model.partial_fit(x_train, y_train, classes=np.unique(y))

    # پیش‌بینی احتمالات
    y_prob = model.predict_proba(x_train);

    # محاسبه تابع اتلاف
    loss = log_loss(y_train, y_prob);

    loss_history.append(loss);


# نمایش نمودار تغییرات تابع اتلاف در هر تکرار
plt.plot(loss_history)
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Loss Curve')
plt.show()

model.score(x_train,y_train)

model.score(x_test,y_test)

y_pred=model.predict(x_test)
import seaborn as sns
from sklearn.metrics import confusion_matrix, precision_score, recall_score
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)
# محاسبه recall برای کلاس 0
recall_class_0 = recall_score(y_test, y_pred, pos_label=0)
print(f"Recall for Class 0: {recall_class_0}")

# محاسبه precision برای کلاس 0
precision_class_0 = precision_score(y_test, y_pred, pos_label=0)
print(f"Precision for Class 0: {precision_class_0}")

# محاسبه recall برای کلاس 1
recall_class_1 = recall_score(y_test, y_pred, pos_label=1)
print(f"Recall for Class 1: {recall_class_1}")

# محاسبه precision برای کلاس 1
precision_class_1 = precision_score(y_test, y_pred, pos_label=1)
print(f"Precision for Class 1: {precision_class_1}")

conf_matrix = confusion_matrix(y_test, y_pred)

# رسم ماتریس درهم‌ریختگی با استفاده از سی‌بورن
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False,
            xticklabels=['Predicted 0', 'Predicted 1'], yticklabels=['Actual 0', 'Actual 1'])

plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()