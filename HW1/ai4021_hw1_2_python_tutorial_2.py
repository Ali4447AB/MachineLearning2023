# -*- coding: utf-8 -*-
"""AI4021 - HW1 - 2 - Python Tutorial 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WjQANHLE5nVMfAsX_IVkS_V5T-FvWLgF

**Problem 1:** Create a NumPy array of 20 random integers between 1 and 100. Calculate the mean, median, and standard deviation of the array.
"""

import numpy as np

# Create a NumPy array of 20 random integers between 1 and 100
random_array = np.random.randint(1, 101, 20)

# Calculate the mean, median, and standard deviation
mean_value = np.mean(random_array)
median_value = np.median(random_array)
std_deviation = np.std(random_array)

# Print the results
print("Random Array:", random_array)
print("Mean:", mean_value)
print("Median:", median_value)
print("Standard Deviation:", std_deviation)

"""**Problem 2:** Create a Pandas DataFrame with three columns - 'Name', 'Age', and 'City' - and at least five rows of data. Perform a basic data exploration by displaying the first 3 rows, the last 2 rows, and a summary of statistics for the 'Age' column."""

import pandas as pd

# Create a Pandas DataFrame with three columns - 'Name', 'Age', and 'City'
data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Emma'],
        'Age': [25, 30, 22, 35, 28],
        'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'San Francisco']}

df = pd.DataFrame(data)

# Display the first 3 rows
print("First 3 rows:")
print(df.head(3))

# Display the last 2 rows
print("\nLast 2 rows:")
print(df.tail(2))

# Display a summary of statistics for the 'Age' column
print("\nSummary of statistics for 'Age' column:")
print(df['Age'].describe())

"""**Problem 3:** Create a bar chart using Matplotlib to visualize the following data: Monthly sales for a store (January to May). Use appropriate labels and titles for the chart."""

import matplotlib.pyplot as plt

# Monthly sales data
months = ['January', 'February', 'March', 'April', 'May']
sales = [50000, 60000, 75000, 90000, 80000]

# Create a bar chart
plt.bar(months, sales, color='blue')

# Add labels and title
plt.xlabel('Month')
plt.ylabel('Sales (in USD)')
plt.title('Monthly Sales for the Store (January to May)')

# Display the bar chart
plt.show()

"""**Problem 4:** Create two NumPy arrays, 'arr1' and 'arr2', both of size 5x5 with random integer values. Perform element-wise addition, subtraction, multiplication, and division between the two arrays."""

import numpy as np

# Create two NumPy arrays of size 5x5 with random integer values
arr1 = np.random.randint(1, 10, size=(5, 5))
arr2 = np.random.randint(1, 10, size=(5, 5))

# Display the original arrays
print("Array 1:")
print(arr1)
print("\nArray 2:")
print(arr2)

# Perform element-wise addition, subtraction, multiplication, and division
addition_result = arr1 + arr2
subtraction_result = arr1 - arr2
multiplication_result = arr1 * arr2

# Perform element-wise division and convert to integers
division_result = (arr1 / arr2).astype(int)

# Display the results
print("\nElement-wise Addition:")
print(addition_result)
print("\nElement-wise Subtraction:")
print(subtraction_result)
print("\nElement-wise Multiplication:")
print(multiplication_result)
print("\nElement-wise Division:")
print(division_result)

"""**Problem 5:** Given a Pandas DataFrame with information about employees, filter and display only the employees who are older than 30 years."""

import pandas as pd

# Assuming you have a DataFrame named 'employees' with a column 'Age'
# Create a sample DataFrame for illustration
data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Emma'],
        'Age': [25, 32, 28, 40, 35],
        'Department': ['HR', 'IT', 'Marketing', 'Finance', 'IT']}

employees = pd.DataFrame(data)

# Filter employees older than 30
older_than_30 = employees[employees['Age'] > 30]

# Display the filtered DataFrame
print("Employees older than 30:")
print(older_than_30)

"""**Problem 6:** Create a scatter plot using Matplotlib to visualize a dataset of 100 random (x, y) coordinates. Label the axes appropriately and give the plot a title."""

import matplotlib.pyplot as plt
import numpy as np

# Generate random (x, y) coordinates
np.random.seed(42)  # For reproducibility
num_points = 100
x_coordinates = np.random.rand(num_points)
y_coordinates = np.random.rand(num_points)

# Create a scatter plot
plt.scatter(x_coordinates, y_coordinates, label='Random Data', color='blue', alpha=0.7)

# Add labels and title
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Scatter Plot of 100 Random (x, y) Coordinates')

# Add a legend
plt.legend()

# Show the plot
plt.show()

"""**Problem 7:** Create two NumPy matrices, 'matrix1' (2x3) and 'matrix2' (3x4), with random values. Perform matrix multiplication between the two matrices."""

import numpy as np

# Create two NumPy matrices with random values
matrix1 = np.random.randint(1, 10, size=(2, 3))
matrix2 = np.random.randint(1, 10, size=(3, 4))

# Display the matrices
print("Matrix 1:")
print(matrix1)
print("\nMatrix 2:")
print(matrix2)

# Perform matrix multiplication
result_matrix = np.dot(matrix1, matrix2)

# Display the result
print("\nResult of Matrix Multiplication:")
print(result_matrix)

"""**Problem 8:** Given a Pandas DataFrame containing sales data, calculate and display the total sales for each product category."""

import pandas as pd

# Assuming you have a DataFrame named 'sales_data' with columns 'Product', 'Category', and 'Sales'
# Create a sample DataFrame for illustration
data = {'Product': ['A', 'B', 'A', 'C', 'B', 'C', 'A', 'B'],
        'Category': ['Electronics', 'Clothing', 'Electronics', 'Electronics', 'Clothing', 'Clothing', 'Electronics', 'Electronics'],
        'Sales': [150, 80, 120, 200, 90, 120, 180, 250]}

sales_data = pd.DataFrame(data)

# Calculate total sales for each product category
total_sales_by_category = sales_data.groupby('Category')['Sales'].sum().reset_index()

# Display the total sales by category
print("Total Sales by Category:")
print(total_sales_by_category)

"""**Problem 9:** Create a line chart using Matplotlib to visualize the population growth of a city over 10 years. Label the axes and provide a title."""

import matplotlib.pyplot as plt

# Assuming you have data for the population growth over 10 years
years = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]
population = [500000, 520000, 540000, 560000, 580000, 600000, 620000, 640000, 660000, 680000]

# Create a line chart
plt.plot(years, population, marker='o', linestyle='-', color='b', label='Population Growth')

# Add labels and title
plt.xlabel('Year')
plt.ylabel('Population')
plt.title('City Population Growth Over 10 Years')

# Add a legend
plt.legend()

# Show the plot
plt.show()

"""**Problem 10:** Given a Pandas DataFrame containing information about students, add a new column 'Grade' based on the following criteria:
* If 'Score' >= 90, Grade is 'A'
* If 'Score' >= 80, Grade is 'B'
* If 'Score' >= 70, Grade is 'C'
* If 'Score' < 70, Grade is 'D'
"""

import pandas as pd

# Assuming you have a DataFrame named 'students_data' with a column 'Score'
# Create a sample DataFrame for illustration
data = {'StudentID': [1, 2, 3, 4, 5],
        'Name': ['John', 'Jane', 'Bob', 'Alice', 'Charlie'],
        'Score': [85, 92, 78, 65, 88]}

students_data = pd.DataFrame(data)

# Add a new column 'Grade' based on the criteria
students_data['Grade'] = pd.cut(students_data['Score'], bins=[0, 70, 80, 90, 100], labels=['D', 'C', 'B', 'A'], right=False)

# Display the updated DataFrame
print("Updated DataFrame with Grades:")
print(students_data)

"""**Problem 11:** You are given a dataset containing monthly sales data for three products (A, B, and C) over a two-year period. Your task is to perform various data analysis tasks using NumPy, Pandas, and Matplotlib.


*   Dataset:

```
import pandas as pd

data = {
    'Month': pd.date_range(start='2021-01-01', periods=24, freq='M'),
    'Product A Sales': [500, 480, 600, 750, 900, 850, 920, 1100, 1300, 1350, 1500, 1450, 1550, 1600, 1650, 1600, 1500, 1400, 1600, 1700, 1800, 1750, 1850, 1900],
    'Product B Sales': [300, 320, 400, 450, 500, 580, 700, 750, 820, 900, 950, 980, 1050, 1100, 1150, 1200, 1250, 1300, 1350, 1400, 1500, 1600, 1550, 1700],
    'Product C Sales': [200, 210, 250, 280, 320, 350, 380, 400, 420, 440, 460, 480, 500, 520, 540, 560, 580, 600, 620, 640, 660, 680, 700, 720]
}

sales_df = pd.DataFrame(data)
```
*  Tasks:
1. Calculate and display the total sales for each product over the two-year period.

2. Calculate and display the average monthly sales for each product.

3. Find the month with the highest sales for each product, and display the product and the sales value for that month.

4. Calculate and display the percentage change in sales for each product from January to December in the second year (2022).

5. Create a line chart using Matplotlib to visualize the monthly sales data for each product over the two-year period. Label the axes and provide a title for the chart.

6. Calculate the correlation between Product A and Product B sales. Is there a strong correlation between these two products? Display the correlation coefficient.

"""

import pandas as pd
import matplotlib.pyplot as plt

# Dataset
data = {
    'Month': pd.date_range(start='2021-01-01', periods=24, freq='M'),
    'Product A Sales': [500, 480, 600, 750, 900, 850, 920, 1100, 1300, 1350, 1500, 1450, 1550, 1600, 1650, 1600, 1500, 1400, 1600, 1700, 1800, 1750, 1850, 1900],
    'Product B Sales': [300, 320, 400, 450, 500, 580, 700, 750, 820, 900, 950, 980, 1050, 1100, 1150, 1200, 1250, 1300, 1350, 1400, 1500, 1600, 1550, 1700],
    'Product C Sales': [200, 210, 250, 280, 320, 350, 380, 400, 420, 440, 460, 480, 500, 520, 540, 560, 580, 600, 620, 640, 660, 680, 700, 720]
}

sales_df = pd.DataFrame(data)

# Task 1: Total sales for each product
total_sales = sales_df[['Product A Sales', 'Product B Sales', 'Product C Sales']].sum()
print("Total Sales for Each Product:")
print(total_sales)

# Task 2: Average monthly sales for each product
average_sales = sales_df[['Product A Sales', 'Product B Sales', 'Product C Sales']].mean()
print("\nAverage Monthly Sales for Each Product:")
print(average_sales)

# Task 3: Month with the highest sales for each product
max_sales_month = sales_df.iloc[:, 1:].idxmax()
print("\nMonth with the Highest Sales for Each Product:")
print(max_sales_month)

# Task 4: Percentage change in sales from January to December in the second year (2022)
sales_2022 = sales_df[sales_df['Month'].dt.year == 2022]
percentage_change = sales_2022.set_index('Month').pct_change().tail(11) * 100
print("\nPercentage Change in Sales from January to December 2022:")
print(percentage_change)

# Task 5: Line chart to visualize monthly sales data
plt.figure(figsize=(10, 6))
plt.plot(sales_df['Month'], sales_df['Product A Sales'], label='Product A')
plt.plot(sales_df['Month'], sales_df['Product B Sales'], label='Product B')
plt.plot(sales_df['Month'], sales_df['Product C Sales'], label='Product C')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.title('Monthly Sales Data Over Two Years')
plt.legend()
plt.show()

# Task 6: Correlation between Product A and Product B sales
correlation_coefficient = sales_df[['Product A Sales', 'Product B Sales']].corr().iloc[0, 1]
print("\nCorrelation between Product A and Product B Sales:")
print(correlation_coefficient)